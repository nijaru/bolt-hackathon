import { Handler } from '@netlify/functions';
import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  process.env.SUPABASE_URL!,
  process.env.SUPABASE_ANON_KEY!
);

interface RedditShareRequest {
  roastId: string;
  title: string;
  subreddit: string;
  userId: string;
}

export const handler: Handler = async (event, context) => {
  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      body: JSON.stringify({ error: 'Method not allowed' })
    };
  }

  try {
    const { roastId, title, subreddit, userId }: RedditShareRequest = JSON.parse(event.body || '{}');

    if (!roastId || !title || !subreddit || !userId) {
      return {
        statusCode: 400,
        body: JSON.stringify({ error: 'Missing required fields' })
      };
    }

    // Get the roast content
    const { data: roast, error: roastError } = await supabase
      .from('roasts')
      .select('*')
      .eq('id', roastId)
      .eq('user_id', userId)
      .single();

    if (roastError || !roast) {
      return {
        statusCode: 404,
        body: JSON.stringify({ error: 'Roast not found' })
      };
    }

    // Create Reddit post content
    const postContent = `${roast.roast_text}\n\n---\n\nðŸ”¥ **Got roasted by AI?** Try it yourself at: https://ai-roast-generator.netlify.app\n\n*Personality: ${roast.personality} | Generated by AI Roast Generator*`;

    // For demo purposes, we'll simulate Reddit posting
    // In production, this would use Reddit API with OAuth
    const redditPost = {
      id: `reddit_${Date.now()}`,
      title,
      content: postContent,
      subreddit,
      url: `https://reddit.com/r/${subreddit}/comments/demo_${roastId}`,
      created_at: new Date().toISOString()
    };

    // Save share record to database
    const { error: shareError } = await supabase
      .from('reddit_shares')
      .insert({
        roast_id: roastId,
        user_id: userId,
        reddit_post_id: redditPost.id,
        subreddit,
        title,
        reddit_url: redditPost.url,
        shared_at: new Date().toISOString()
      });

    if (shareError) {
      console.error('Database error:', shareError);
      return {
        statusCode: 500,
        body: JSON.stringify({ error: 'Failed to save share record' })
      };
    }

    // Update roast analytics
    await supabase
      .from('roasts')
      .update({ 
        share_count: (roast.share_count || 0) + 1,
        last_shared_at: new Date().toISOString()
      })
      .eq('id', roastId);

    return {
      statusCode: 200,
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Content-Type, Authorization',
        'Access-Control-Allow-Methods': 'POST, OPTIONS'
      },
      body: JSON.stringify({
        success: true,
        redditUrl: redditPost.url,
        postId: redditPost.id,
        message: 'Successfully shared to Reddit!'
      })
    };

  } catch (error) {
    console.error('Reddit sharing error:', error);
    return {
      statusCode: 500,
      body: JSON.stringify({ 
        error: 'Internal server error',
        details: error instanceof Error ? error.message : 'Unknown error'
      })
    };
  }
};